apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-checkout-cluster
spec:
  params:
  - name: clusterPoolName
    default: hypershift-cluster-pool
    description: The name of the clusterpool to use
    type: string
  - name: clusterName
    default: demo-claim
    description: The name of the clusterclaim to use
    type: string
  results:
  - name: username
    description: Username for the claimed cluster.
  - name: password
    description: Password for the claimed cluster.  
  - name: api
    description: API URL of the claimed cluster.
  - name: imagePullSecret
    description: The imagePullSecret on the hub cluster.
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e
      
      _TEMPLATE="apiVersion: hive.openshift.io/v1
      kind: ClusterClaim
      metadata:
        annotations:
          cluster.open-cluster-management.io/createmanagedcluster: 'false'
        name: $(inputs.params.clusterName)
      spec:
        clusterPoolName: $(inputs.params.clusterPoolName)
        subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: Group
          name: idp-for-the-masses
        - apiGroup: rbac.authorization.k8s.io
          kind: Group
          name: system:serviceaccounts:managed-services"

      echo "$_TEMPLATE" | oc apply -f -

      oc wait --for=condition=ClusterRunning clusterclaim.hive/$(inputs.params.clusterName) --timeout=90m

      NAMESPACE=$(oc get clusterclaim.hive $(inputs.params.clusterName) -o=jsonpath='{.spec.namespace}')
      CD_INFO=$(oc get clusterdeployment ${NAMESPACE} -n ${NAMESPACE} -o yaml -o=jsonpath='{.spec.clusterMetadata.adminPasswordSecretRef.name}')
      KUBECONFIG_SECRET=$(oc get cd ${NAMESPACE} -n ${NAMESPACE} -o yaml | yq eval '.spec.clusterMetadata.adminKubeconfigSecretRef.name' -)

      oc patch clusterdeployment ${NAMESPACE} -n ${NAMESPACE} --type json -p '[{"op": "add", "path": "/metadata/labels/hibernate", "value": "false"}]'

      _USERNAME=$(oc get secret ${CD_INFO} -n ${NAMESPACE} -o jsonpath='{.data.username}' | base64 -d )
      _PASSWORD=$(oc get secret ${CD_INFO} -n ${NAMESPACE} -o jsonpath='{.data.password}' | base64 -d  )
      _API_URL=$(oc get cd ${NAMESPACE} -n ${NAMESPACE} -o jsonpath='{.status.apiURL}' )
      
      oc get secret -n ${NAMESPACE} ${KUBECONFIG_SECRET} -o yaml | yq eval '.data.kubeconfig' - | base64 -d > $(inputs.params.clusterName)-kubeconfig.yaml
      
      _IMAGE_PULL_SECRET=$(oc get secret kcp-sgs-pipelines-multiclusterhub-operator-pull-secret -o yaml | yq eval '.data.".dockerconfigjson"' -)

      echo "$_USERNAME" | tr -d '\n' > $(results.username.path)
      echo "$_PASSWORD" | tr -d '\n' > $(results.password.path)
      echo "$_API_URL" | tr -d '\n' > $(results.api.path)
      echo "$_IMAGE_PULL_SECRET" | tr -d '\n' > $(results.imagePullSecret.path)

      echo "API URL of claimed cluster: $_API_URL"
      echo "Password for the claimed cluster: $_PASSWORD"
      echo ""
      echo "Clusterclaim successfully checked out"
      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-login-to-hub
spec:
  params:
  - name: username
    default: kubeadmin
    description: The username of the claimed cluster
    type: string
  - name: password
    default: password
    description: The password of the claimed cluster
    type: string
  - name: api
    default: https://api.openshift.com
    description: The claimed cluster API URL
    type: string
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e
      
      LOGINCMD="oc login $(inputs.params.api) -u $(inputs.params.username) -p $(inputs.params.password) --insecure-skip-tls-verify=true"
      eval $LOGINCMD
      
      echo $LOGINCMD > login.sh
      echo $LOGINCMD

    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-ensure-acm-prereqs
spec:
  params:
  - name: snapshot
    default: ""
    description: The SNAPSHOT Tag used to deploy the catalogsources
    type: string
  - name: imagePullSecret
    default: ""
    description: The image pull secret used to deploy the catalogsources. Copied from clusterPoolNamespace
    type: string
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      echo "Creating Namespace..."
      oc create namespace open-cluster-management --dry-run=client -o yaml | oc apply -f -
      
      echo "Creating ImagePullSecret..."
      _TEMPLATE="apiVersion: v1
      data:
        .dockerconfigjson: $(inputs.params.imagePullSecret)
      kind: Secret
      metadata:
        name: acm-pull-secret
      type: kubernetes.io/dockerconfigjson"
      echo "$_TEMPLATE" | oc apply -n open-cluster-management -f  -
      echo "$_TEMPLATE" | oc apply -n openshift-marketplace -f -

      echo "Creating ACM CatalogSource..."

      _TEMPLATE="apiVersion: operators.coreos.com/v1alpha1
      kind: CatalogSource
      metadata:
        name: acm-custom-registry
        namespace: openshift-marketplace
      spec:
        displayName: Advanced Cluster Management
        image: quay.io/acm-d/acm-custom-registry:$(inputs.params.snapshot)
        publisher: Red Hat
        sourceType: grpc
        updateStrategy:
          registryPoll:
            interval: 10m
        secrets:
        - acm-pull-secret"
      echo "$_TEMPLATE" | oc apply -f -

      echo "Creating MCE CatalogSource..."

      _TEMPLATE="apiVersion: operators.coreos.com/v1alpha1
      kind: CatalogSource
      metadata:
        name: multiclusterengine-catalog
        namespace: openshift-marketplace
      spec:
        displayName: MultiCluster Engine
        image: quay.io/acm-d/mce-custom-registry:$(inputs.params.snapshot)
        publisher: Red Hat
        sourceType: grpc
        updateStrategy:
          registryPoll:
            interval: 10m
        secrets:
        - acm-pull-secret"
      echo "$_TEMPLATE" | oc apply -f -

      echo "Created ACM Prereqs successfully."
      exit 0

    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-acm-apply-sub
spec:
  params:
  - name: snapshot
    default: 2.5.0-SNAPSHOT
    description: The snapshot used to deploy MCE
    type: string
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      oc project open-cluster-management
      _CHANNEL="release-$(echo $(inputs.params.snapshot) | cut -c1-3)"

      existingCSV=$(oc get sub acm-operator-subscription -o yaml | yq eval '.status.currentCSV' -)
      if [[ "$existingCSV" != "" ]]; then
          oc delete sub acm-operator-subscription || true
          oc delete csv $existingCSV || true
      else
        echo "No existing ACM install"
      fi

      echo ""

      oc apply -f samples/hypershift-pipelines/resources/operatorgroup.yaml
      oc patch og default --type=merge -p '{ "spec":  { "targetNamespaces" : ["open-cluster-management"]}}'

      _TEMPLATE="apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: acm-operator-subscription
      spec:
        channel: ${_CHANNEL}
        installPlanApproval: Automatic
        name: advanced-cluster-management
        source: acm-custom-registry
        sourceNamespace: openshift-marketplace"
      echo "$_TEMPLATE" | oc apply -f -

      _ATTEMPTS=0
      until oc get sub acm-operator-subscription -o jsonpath='{.status.currentCSV}' | grep -q "advanced";
      do 
          _ATTEMPTS=$((_ATTEMPTS + 1))
          echo "Attempt: ${_ATTEMPTS}/5 - Waiting for CSV"
          sleep 5;
          if [[ $_ATTEMPTS == 5 ]]; then
              echo "Failed to find the CSV in allotted time"
              exit 1
          fi
      done
      echo "ACM CSV has been created"
      echo ""

      _CURRENT_CSV=$(oc get sub acm-operator-subscription -o jsonpath='{.status.currentCSV}')

      _ATTEMPTS=0
      until oc get csv ${_CURRENT_CSV} -ojsonpath='{.status.phase}' | grep "Succeeded";
      do 
          echo "Attempt: ${_ATTEMPTS}/10 - Waiting for CSV installation to complete"
          _ATTEMPTS=$((_ATTEMPTS + 1))
          sleep 15;
          if [[ $_ATTEMPTS == 10 ]]; then
              echo "The CSV failed to install in the allotted time"
              exit 1
          fi
      done

      echo "ACM subscription installation has succeeeded"
      exit 0

    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-apply-mch
spec:
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"
      oc project open-cluster-management

      oc apply -f samples/kcp-sgs-pipelines/resources/multiclusterhub.yaml

      _ATTEMPTS=0
      until oc get mch multiclusterhub -o jsonpath={'.status.phase'} | grep "Running";
      do 
          echo "Attempt: ${_ATTEMPTS}/30 - Waiting for MCH to enter a Running state"
          _ATTEMPTS=$((_ATTEMPTS + 1))
          sleep 15;
          if [[ $_ATTEMPTS == 30 ]]; then
              echo "Failed to install the MCH in allotted time"
              exit 1
          fi
      done

      echo "MultiClusterHub is running"
      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-import-spoke
spec:
  params:
  - name: clusterName
    default: demo-claim
    description: The name of the clusterclaim to use
    type: string
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"
      
      echo "# Copyright Contributors to the Open Cluster Management project
      managedCluster:
        name: ""
        addons:
          applicationManager:
            enabled: false
            argocdCluster: false
          policyController:
            enabled: true
          searchCollector:
            enabled: false
          certPolicyController:
            enabled: false
          iamPolicyController:
            enabled: false
        autoImportRetry: 5" > spokevalues.yaml

      cm attach cluster --cluster $(inputs.params.clusterName) --cluster-kubeconfig $(inputs.params.clusterName)-kubeconfig.yaml --values spokevalues.yaml

      echo "Spoke cluster successfully imported"
      exit 0 
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-hyper-deployment-aws
spec:
  params:
  - name: hypershiftDeploymentName
    default: local-cluster
    description: The namespace to deploy the hypershift deployment
    type: string
  - name: targetManagedCluster
    default: local-cluster
    description: The managedcluster to target to become a managementcluster
    type: string
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      HYPERSHIFT_CREDS=$(oc get secret kcp-sgs-pipelines-hypershift-operator-oidc-provider-s3-credentials -o yaml | yq eval 'del(.metadata)' - | yq eval '.metadata.name = "hypershift-operator-oidc-provider-s3-credentials"' -)
      ACM_AWS_CREDS=$(oc get secret kcp-sgs-pipelines-acm-aws-creds -o yaml | yq eval 'del(.metadata)' - | yq eval '.metadata.name = "acm-credentials"' -)

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      echo "$HYPERSHIFT_CREDS" | oc apply -f - -n $(inputs.params.targetManagedCluster)
      echo "$ACM_AWS_CREDS" | oc apply -f - -n $(inputs.params.targetManagedCluster)

      echo "Applying HyperShift ManagedClusterAddon ..."
      oc apply -f samples/kcp-sgs-pipelines/resources/hypershift-addon.yaml -n $(inputs.params.targetManagedCluster)
      echo ""

      oc project multicluster-engine
      oc create ns clusters || true

      echo "Creating AWS HyperShiftDeployment"
      _TEMPLATE="apiVersion: cluster.open-cluster-management.io/v1alpha1
      kind: HypershiftDeployment
      metadata:
        name: $(inputs.params.hypershiftDeploymentName)
        namespace: $(inputs.params.targetManagedCluster)
      spec:
        hostingCluster: $(inputs.params.targetManagedCluster)
        hostingNamespace: $(inputs.params.targetManagedCluster)
        infrastructure:
          cloudProvider:
            name: acm-credentials
          configure: True
          platform:
            aws:
              region: us-east-2"
      echo "$_TEMPLATE" | oc apply -f -

      echo "Validating HostedCluster is imported hub"
      _ATTEMPTS=0
      echo "Waiting for ManagedCluster to be created ..."
      until oc get managedcluster | grep "$(inputs.params.hypershiftDeploymentName)";
      do 
        echo "$_ATTEMPTS/10: Waiting for HostedCluster ManagedCluster to be available... Sleeping 1 min"
        _ATTEMPTS=$((_ATTEMPTS + 1))
        sleep 60;
        if [[ $_ATTEMPTS == 10 ]]; then
            echo "The managedcluster not come up in the allotted time"
            exit 1
        fi
      done
      echo "HyperShiftDeployment is running on hub cluster"

      echo "Validating HyperShiftDeployment has Completed"
      _ATTEMPTS=0
      until  oc get hd $(inputs.params.hypershiftDeploymentName) -n $(inputs.params.targetManagedCluster) --no-headers | grep "Completed";
      do 
        echo "$_ATTEMPTS/60: HostedCluster is not yet ready"
        _ATTEMPTS=$((_ATTEMPTS + 1))
        sleep 60;
        if [[ $_ATTEMPTS == 60 ]]; then
            echo "The HyperShiftDeployment is not ready"
            exit 1
        fi
      done
      echo "HyperShiftDeployment has completed successfully"

      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-configure-idp
spec:
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e
      
      _GITHUB_CLIENT_ID=$(oc get secret kcp-sgs-pipelines-secrets-config -o yaml | yq eval '.data.clientID' - | base64 -d)
      _GITHUB_CLIENT_SECRET=$(oc get secret kcp-sgs-pipelines-secrets-config -o yaml | yq eval '.data.clientSecret' - | base64 -d)

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      oc create secret generic github-idp-client-secret --from-literal=clientSecret=${_GITHUB_CLIENT_SECRET} -n openshift-config || true

      CLIENT_ID=${_GITHUB_CLIENT_ID} yq eval -i '.spec.identityProviders[0].github.clientID = env(CLIENT_ID)' samples/kcp-sgs-pipelines/resources/github-idp.yaml

      oc apply -f samples/kcp-sgs-pipelines/resources/github-idp.yaml

      oc apply -f samples/kcp-sgs-pipelines/resources/kcp-sgs-sre-rbac.yaml
      
      exit 0 
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-hyper-deployment-azure
spec:
  params:
  - name: hypershiftDeploymentName
    default: local-cluster
    description: The namespace to deploy the hypershift deployment
    type: string
  - name: targetManagedCluster
    default: local-cluster
    description: The managedcluster to target to become a managementcluster
    type: string
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      HYPERSHIFT_CREDS=$(oc get secret kcp-sgs-pipelines-hypershift-operator-oidc-provider-s3-credentials -o yaml | yq eval 'del(.metadata)' - | yq eval '.metadata.name = "hypershift-operator-oidc-provider-s3-credentials"' -)
      ACM_AZR_CREDS=$(oc get secret kcp-sgs-pipelines-acm-azure-creds -o yaml | yq eval 'del(.metadata)' - | yq eval '.metadata.name = "azure-credentials"' -)

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      echo "$HYPERSHIFT_CREDS" | oc apply -f - -n $(inputs.params.targetManagedCluster)
      echo "$ACM_AZR_CREDS" | oc apply -f - -n $(inputs.params.targetManagedCluster)

      echo "Applying HyperShift ManagedClusterAddon ..."
      oc apply -f samples/kcp-sgs-pipelines/resources/hypershift-addon.yaml -n $(inputs.params.targetManagedCluster)
      echo ""

      oc project multicluster-engine
      oc create ns clusters || true

      echo "Creating Azure HyperShiftDeployment"
      _TEMPLATE="apiVersion: cluster.open-cluster-management.io/v1alpha1
      kind: HypershiftDeployment
      metadata:
        name: $(inputs.params.hypershiftDeploymentName)
        namespace: $(inputs.params.targetManagedCluster)
      spec:
        hostingCluster: $(inputs.params.targetManagedCluster)
        hostingNamespace: $(inputs.params.targetManagedCluster)
        infrastructure:
          cloudProvider:
            name: azure-credentials
          configure: True
          platform:
            azure:
              location: eastus2"
      echo "$_TEMPLATE" | oc apply -f -

      echo "Validating HostedCluster is imported hub"
      _ATTEMPTS=0
      echo "Waiting for ManagedCluster to be created ..."
      until oc get managedcluster | grep "$(inputs.params.hypershiftDeploymentName)";
      do 
        echo "$_ATTEMPTS/10: Waiting for HostedCluster ManagedCluster to be available... Sleeping 1 min"
        _ATTEMPTS=$((_ATTEMPTS + 1))
        sleep 60;
        if [[ $_ATTEMPTS == 10 ]]; then
            echo "The managedcluster not come up in the allotted time"
            exit 1
        fi
      done
      echo "HyperShiftDeployment is running on hub cluster"

      echo "Validating HyperShiftDeployment has Completed"
      _ATTEMPTS=0
      until  oc get hd $(inputs.params.hypershiftDeploymentName) -n $(inputs.params.targetManagedCluster) --no-headers | grep "Completed";
      do 
        echo "$_ATTEMPTS/60: HostedCluster is not yet ready"
        _ATTEMPTS=$((_ATTEMPTS + 1))
        sleep 60;
        if [[ $_ATTEMPTS == 60 ]]; then
            echo "The HyperShiftDeployment is not ready"
            exit 1
        fi
      done
      echo "HyperShiftDeployment has completed successfully"

      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-kcp-hub-deploy-observability
spec:
  steps:
  - args:
    - |-
      #!/bin/bash
      set -e

      _AWS_BUCKET_NAME=$(oc get secret kcp-sgs-pipelines-secrets-config -o yaml | yq eval '.data.awsBucketName' - | base64 -d)
      _AWS_BUCKET_ENDPOINT=$(oc get secret kcp-sgs-pipelines-secrets-config -o yaml | yq eval '.data.awsBucketEndpoint' - | base64 -d)
      _AWS_ACCESS_KEY=$(oc get secret kcp-sgs-pipelines-secrets-config -o yaml | yq eval '.data.awsAccessKey' - | base64 -d)
      _AWS_SECRET_ACCESS_KEY=$(oc get secret kcp-sgs-pipelines-secrets-config -o yaml | yq eval '.data.awsSecretAccessKey' - | base64 -d)

      _LOGIN_CMD=$(cat login.sh)
      eval "$_LOGIN_CMD"

      oc create namespace open-cluster-management-observability --dry-run=client -o yaml | oc apply -f -

      _MCH_PULL_SECRET=$(oc get mch multiclusterhub -n open-cluster-management -o yaml | yq eval '.spec.imagePullSecret' -)
      DOCKER_CONFIG_JSON=$(oc extract secret/${_MCH_PULL_SECRET} -n open-cluster-management --to=-)
      oc create secret generic multiclusterhub-operator-pull-secret \
      -n open-cluster-management-observability \
      --from-literal=.dockerconfigjson="$DOCKER_CONFIG_JSON" \
      --type=kubernetes.io/dockerconfigjson || true

      yq eval '.stringData."thanos.yaml"' samples/kcp-sgs-pipelines/resources/observability_secret.yaml > thanos.yaml
      BUCKET=${_AWS_BUCKET_NAME} yq eval -i '.config.bucket = env(BUCKET)' thanos.yaml
      ENDPOINT=${_AWS_BUCKET_ENDPOINT} yq eval -i '.config.endpoint = env(ENDPOINT)' thanos.yaml
      ACCESSKEY=${_AWS_ACCESS_KEY} yq eval -i '.config.access_key = env(ACCESSKEY)' thanos.yaml
      SECRETKEY=${_AWS_SECRET_ACCESS_KEY} yq eval -i '.config.secret_key = env(SECRETKEY)' thanos.yaml

      thanosYaml=$(cat thanos.yaml) yq eval -i '.stringData."thanos.yaml" = strenv(thanosYaml)' samples/kcp-sgs-pipelines/resources/observability_secret.yaml

      oc apply -f samples/kcp-sgs-pipelines/resources/observability_secret.yaml

      oc apply -f samples/kcp-sgs-pipelines/resources/multiclusterobservability.yaml

      exit 0 
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source

---
